---
title: "CO2"
author: "Paige Hill, Lauren McIntosh, Amaya Owens"
format:
  dashboard:
    theme: flatly
    orientation: rows
    embed-resources: true
jupyter:
  kernelspec:
    name: python3
    display_name: Python 3
    language: python
---

```{python}
#| label: info
#| include: false


import pandas as pd
import altair as alt
import numpy as np
alt.renderers.enable('html')

df = pd.read_csv("Data.csv")

# create subset of data
df.dropna(subset=["year", "Name", "gdp", "population", "temperature_change_from_co2", "co2_per_capita"],inplace=True)
df2=df[["year", "Name", "gdp", "population", "co2_per_capita", "temperature_change_from_co2"]].query("year > 1950")

world_df = df2.query("Name == 'World'")
final_df = df2.query("Name != 'World'")

```

# Overview
## Row {height=200px}
```{python}
#| content: valuebox
#| title: "Number of Countries:"
#| icon: "globe-americas"
#| color: "primary"
num_countries = final_df['Name'].nunique()

dict(
  value = f"{num_countries}"
)
```

```{python}
#| content: valuebox
#| title: "Wost CO2 Emitter in 2022:"
#| icon: "exclamation-lg"
#| color: "danger"
by_emissions = final_df.sort_values(by="co2_per_capita", ascending = False).query("year == 2022")
country = by_emissions.iat[0,1]
per_capita = by_emissions.iat[0,4]
dict(
  value = f"{country}: {per_capita} MtCO2 per capita"
)
```

```{python}
#| content: valuebox
#| title: "Temperature limit set by Paris Accords:"
#| icon: "thermometer"
#| color: "secondary"

dict(
  value = "2 C"
)
```

## Row 
```{python}
#| code-fold: true
source = pd.DataFrame({
    'x' : world_df['year'],
    'y' : world_df['temperature_change_from_co2']

})


base = alt.Chart(source).mark_line().encode(
    x=alt.X('x', title='Years'),
    y=alt.Y('y', title= 'Temp (°C)')
)

peak_line = alt.Chart(
    pd.DataFrame({'y': [2]})).mark_rule(color='red').encode(y='y')

world_chart = base + peak_line
world_chart
```

# GDP

# Population
```{python}
#| code-fold: true
final_df = final_df.query("year < 2022 and year > 2000")
chart = alt.Chart(final_df)
chart.mark_point().encode(
    y='co2_per_capita',
    x='population',
    tooltip=['Name', 'co2_per_capita', 'population', 'year'] 
).interactive()
```
# Temperature

```{python}

#temp vs co2 for the world

#World data only
world_df = df2[df2["Name"] == "World"]


#drop rows with missing values for variables
#world_df = world_df.dropna(subset=["year", "co2", "temperature_change_from_co2"])

#world_df=world_df[["year", "co2", "temperature_change_from_co2"]].query("year > 1950")

#baseline co2 emissions
co2_line = (
    alt.Chart(world_df)
    .mark_line(color="steelblue")
    .encode(
        x=alt.X("year:O", title="Year"),
        y=alt.Y("co2_per_capita:Q", title="CO₂ Emissions (million tonnes)", axis=alt.Axis(titleColor="steelblue")),
        tooltip=["year", "co2_per_capita"]
    )
)

#line for temp change with second axis
temp_line = (
    alt.Chart(world_df)
    .mark_line(color="firebrick")
    .encode(
        x="year:O",
        y=alt.Y(
            "temperature_change_from_co2:Q",
            title="Temperature Change from CO₂ (°C)",
            axis=alt.Axis(titleColor="firebrick")
        ),
        tooltip=["year", "temperature_change_from_co2"]
    )
)

#combine both lines, layered graph with two y-axes
co2_vs_temp = alt.layer(co2_line, temp_line).resolve_scale(y='independent').properties(
    title="CO₂ Emissions vs. Temperature Change (World)",
    width=700,
    height=400
)

co2_vs_temp.save('co2_vs_temp.html')



```

<div style="display: flex; justify-content: center; width: 100%;">
<iframe src="co2_vs_temp.html" width="620px" height="500px" style="border: none'"></iframe>
</div>


# Average CO2 By Country
```{python}
avg_co2_by_country = df2.groupby("Name", as_index=False)["co2_per_capita"].mean()

avg_co2_by_country = avg_co2_by_country[avg_co2_by_country["Name"] != "World"]

avg_co2_by_country = avg_co2_by_country.sort_values(by="co2_per_capita", ascending=False)

#print(avg_co2_by_country.head(10))
print(avg_co2_by_country)

```

