---
title: "CO2"
author: "Paige Hill, Lauren McIntosh, Amaya Owens"
format:
  dashboard:
    theme: flatly
    orientation: rows
    embed-resources: true
jupyter:
  kernelspec:
    name: python3
    display_name: Python 3
    language: python
---

```{python}
#| label: info
#| include: false


import pandas as pd
import altair as alt
import numpy as np
from great_tables import GT
alt.renderers.enable('html')

df = pd.read_csv("Data.csv")

# create subset of data
df.dropna(subset=["year", "Name", "gdp", "population", "temperature_change_from_co2", "co2_per_capita"],inplace=True)
df2=df[["year", "Name", "gdp", "population", "co2_per_capita", "temperature_change_from_co2"]].query("year > 1950")

world_df = df2.query("Name == 'World'")
final_df = df2.query("Name != 'World'")

```

# Overview
## Row {height=200px}
```{python}
#| content: valuebox
#| title: "Number of Countries:"
#| icon: "globe-americas"
#| color: "primary"
num_countries = final_df['Name'].nunique()

dict(
  value = f"{num_countries}"
)
```

```{python}
#| content: valuebox
#| title: "Wost CO2 Emission Per Capita in 2022:"
#| icon: "exclamation-lg"
#| color: "danger"
by_emissions = final_df.sort_values(by="co2_per_capita", ascending = False).query("year == 2022")
country = by_emissions.iat[0,1]
per_capita = by_emissions.iat[0,4]
dict(
  value = f"{country}"
)
```

```{python}
#| content: valuebox
#| title: "Temperature limit set by Paris Accords:"
#| icon: "thermometer"
#| color: "secondary"

dict(
  value = "2 °C"
)
```

## Row 
```{python}
#| code-fold: true
source = pd.DataFrame({
    'x' : pd.to_datetime(world_df['year'], format='%Y'),
    'y' : world_df['temperature_change_from_co2']
})

base = alt.Chart(source).mark_line(color="#3498db", strokeWidth=4).encode(
    x=alt.X(
        "x:T",
        title="Year",
        axis=alt.Axis(format='%Y', tickCount='year')
    ),
    y=alt.Y('y', title= 'Temp (°C)'),
)

peak_line = alt.Chart(pd.DataFrame({'y': [2]})).mark_rule(color="#e74c3c", strokeWidth=4).encode(
    y='y',
)

world_chart = (base + peak_line).properties(title="Global Temperature Change vs Time").interactive()
world_chart
```

# GDP
```{python}
#| code-fold: true

# Load the CO2 emissions dataset
df_co2 = pd.read_csv("Data.csv")

# Apply filters for GDP-CO2 analysis
df_filtered = df_co2[(df_co2["year"] >= 1950) & (df_co2["year"] <= 2023)].copy()
df_filtered = df_filtered[df_filtered["Description"] == "Country"].copy()
df_filtered = df_filtered[~df_filtered["Name"].str.endswith("(GCP)", na=False)].copy()
df_filtered = df_filtered.dropna(subset=["Name", "co2", "gdp"]).copy()

# Calculate global averages by year (mean across all countries)
yearly_averages = (
    df_filtered.groupby("year").agg({"co2": "mean", "gdp": "mean"}).reset_index()
)

# Define tick values for every 5 years from 1950-2022
tick_values = [1950, 1955, 1960, 1965, 1970, 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015, 2020, 2022]

# CO2 chart
co2_chart = (
    alt.Chart(yearly_averages)
    .mark_line(
        color="#e74c3c", strokeWidth=4, point=alt.OverlayMarkDef(filled=True, size=50)
    )
    .encode(
        x=alt.X(
            "year:O",
            title="Year",
            axis=alt.Axis(
                labelAngle=-45, values=tick_values, labelExpr="datum.value + ''"
            ),
        ),
        y=alt.Y(
            "co2:Q",
            title="Average CO2 Emissions per Country (MtCO2)",
            axis=alt.Axis(titleColor="#e74c3c", labelColor="#e74c3c"),
        ),
        tooltip=[
            alt.Tooltip("year:O", title="Year"),
            alt.Tooltip("co2:Q", title="Avg CO2 per Country (MtCO2)", format=",.1f"),
            alt.Tooltip("gdp:Q", title="Avg GDP per Country (USD)", format="$,.0f"),
        ],
    )
)

# GDP chart (independent y-axis)
gdp_chart = (
    alt.Chart(yearly_averages)
    .mark_line(
        color="#3498db",
        strokeWidth=4,
        strokeDash=[8, 4],
        point=alt.OverlayMarkDef(filled=True, size=50),
    )
    .encode(
        x=alt.X(
            "year:O", axis=alt.Axis(values=tick_values, labelExpr="datum.value + ''")
        ),
        y=alt.Y(
            "gdp:Q",
            title="Average GDP per Country (USD)",
            scale=alt.Scale(zero=False),
            axis=alt.Axis(titleColor="#3498db", labelColor="#3498db", format="$.0f", 		    labelExpr="'$' + datum.value/1000000000 + 'B'"),
        ),
        tooltip=[
            alt.Tooltip("year:O", title="Year"),
            alt.Tooltip("co2:Q", title="Avg CO2 per Country (MtCO2)", format=",.1f"),
            alt.Tooltip("gdp:Q", title="Avg GDP per Country (USD)", format="$,.0f"),
        ],
    )
)

# Combine with independent y-axes
gdp_co2_chart = (
    alt.layer(co2_chart, gdp_chart)
    .resolve_scale(y="independent")
    .properties(
        width=900,
        height=500,
        title=alt.TitleParams(
            text="Average GDP vs CO2 per Country (1950-2022)",
            fontSize=16,
        ),
    )
)

gdp_co2_chart
```

# Population
```{python}
#| code-fold: true
final_df=final_df.query("year>2000")
population_chart = (alt.Chart(final_df)
    .mark_point(color="#3498db").encode(
    y=alt.Y('co2_per_capita', title="CO2 Emissions Per Capita (Tonnes Per Person)"),
    x=alt.X('population', title="Population"),
    tooltip=['Name', 'co2_per_capita', 'population', 'year'] 
)
    .properties(
        width=900,
        height=500,
        title=alt.TitleParams(
            text="CO2 Emissions Per Capita vs Population (2000-2022)",
            fontSize=16,
             )
    )
    .interactive())
population_chart
```
# Temperature

```{python}

#temp vs co2 for the world

#World data only
world_df = df2[df2["Name"] == "World"]


#drop rows with missing values for variables
#world_df = world_df.dropna(subset=["year", "co2", "temperature_change_from_co2"])

#world_df=world_df[["year", "co2", "temperature_change_from_co2"]].query("year > 1950")

#baseline co2 emissions
co2_line = (
    alt.Chart(world_df)
    .mark_line(color="#3498db", strokeWidth = 4)
    .encode(
        x=alt.X("year:O", title="Year"),
        y=alt.Y("co2_per_capita:Q", title="CO₂ Emissions (million tonnes)", axis=alt.Axis(titleColor="#3498db")),
        tooltip=["year", "co2_per_capita"]
    )
)

#line for temp change with second axis
temp_line = (
    alt.Chart(world_df)
    .mark_line(color="#e74c3c", strokeWidth=4)
    .encode(
        x="year:O",
        y=alt.Y(
            "temperature_change_from_co2:Q",
            title="Temperature Change from CO₂ (°C)",
            axis=alt.Axis(titleColor="#e74c3c")
        ),
        tooltip=["year", "temperature_change_from_co2"]
    )
)

#combine both lines, layered graph with two y-axes
co2_vs_temp = alt.layer(co2_line, temp_line).resolve_scale(y='independent').properties(
    title="CO₂ Emissions vs. Temperature Change (World)",
    width=900,
    height=500
)

co2_vs_temp.save('co2_vs_temp.html')

co2_vs_temp


```


# Average CO2 By Country
```{python}
avg_co2_by_country = df2.groupby("Name", as_index=False)["co2_per_capita"].mean()

avg_co2_by_country = avg_co2_by_country[avg_co2_by_country["Name"] != "World"]

avg_co2_by_country = avg_co2_by_country.sort_values(by="co2_per_capita", ascending=False)

#print(avg_co2_by_country.head(10))
#print(avg_co2_by_country)
avg_country_table = GT(avg_co2_by_country.head(15))
avg_country_table.fmt_number(columns="co2_per_capita", compact=True).cols_label(co2_per_capita="CO2 Per Capita").tab_options(
        column_labels_background_color="#3498db"
    ).cols_align(columns="co2_per_capita", align="center" )

```

# Top 10 CO2 Emitters
```{python}
#| code-fold: true

# Load the CO2 emissions data
df_co2_pivot = pd.read_csv("Data.csv")
# Apply filters
# 1. Filter by year: 1950-2023
df_filtered_pivot = df_co2_pivot[(df_co2_pivot["year"] >= 1950) & (df_co2_pivot["year"] <= 2023)].copy()
# 2. Filter by Description: Only 'Country'
df_filtered_pivot = df_filtered_pivot[df_filtered_pivot["Description"] == "Country"].copy()
# 3. Filter by Name: Exclude strings ending with '(GCP)'
df_filtered_pivot = df_filtered_pivot[~df_filtered_pivot["Name"].str.endswith("(GCP)", na=False)].copy()
# 4. Remove rows with NaN values in our key columns
df_filtered_pivot = df_filtered_pivot.dropna(subset=["Name", "co2", "population", "gdp"]).copy()

# Create pivot table with Name as rows and co2, population, gdp as values
# Using pivot_table instead of groupby
pivot_table = pd.pivot_table(
    df_filtered_pivot,
    values=["co2", "population", "gdp"],
    index="Name",
    aggfunc="mean"
).round(2)

# Sort by CO2 emissions (highest to lowest)
pivot_table = pivot_table.sort_values("co2", ascending=False)

# Get top 10 for display
top_10_pivot = pivot_table.head(10)

# Create display version with cleaned up labels
formatted_pivot_table = top_10_pivot.copy()
formatted_pivot_table.reset_index(inplace=True)
formatted_pivot_table.columns = ["Name","Avg MtCO2", "Avg GDP", "Avg Population"]

# Format for better display
def format_number(x):
    if pd.isna(x):
        return "N/A"
    elif x >= 1e12:
        return f"${x/1e12:.1f}T"
    elif x >= 1e9:
        return f"${x/1e9:.1f}B"
    elif x >= 1e6:
        return f"${x/1e6:.1f}M"
    else:
        return f"${x:,.0f}"

def format_population(x):
    if pd.isna(x):
        return "N/A"
    elif x >= 1e9:
        return f"{x/1e9:.2f}B"
    elif x >= 1e6:
        return f"{x/1e6:.1f}M"
    else:
        return f"{x:,.0f}"

def format_co2(x):
    if pd.isna(x):
        return "N/A"
    else:
        return f"{x:,.1f}"


# Apply formatting to each column
formatted_pivot_table["Avg MtCO2"] = formatted_pivot_table["Avg MtCO2"].apply(format_co2)
formatted_pivot_table["Avg GDP"] = formatted_pivot_table["Avg GDP"].apply(format_number)
formatted_pivot_table["Avg Population"] = formatted_pivot_table["Avg Population"].apply(format_population)


# Now formatted_pivot_table contains the formatted data as a DataFrame
# You can display it with:
#print(formatted_pivot_table)

display_table = GT(formatted_pivot_table)
display_table.tab_header(title="Top 10 CO2 Emitting Countries (1950-2022)").tab_options(
        heading_background_color="#3498db"
    ).opt_horizontal_padding(scale = 2).cols_align(align="center")
```